// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class TelegramWebApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.API_URL = 'https://domo-dev.profintel.ru/tg-bot';
        this.API_TOKEN = 'SecretToken';
        this.currentScreen = 'main';
        this.initApp();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        console.log('TelegramWebApp initialized');
    }

    async initApp() {
        try {
            console.log('Starting initialization...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram.WebApp –¥–æ—Å—Ç—É–ø–µ–Ω
            if (!this.tg) {
                throw new Error('Telegram WebApp is not available');
            }

            this.tg.ready();
            console.log('Telegram.WebApp.ready() called');

            this.setThemeClass();
            console.log('Theme class set');

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = this.tg.initDataUnsafe.user;
            console.log('User data:', user);

            if (!user) {
                throw new Error('User data is not available');
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (user.phone_number) {
                await this.checkAuth();
            } else {
                // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                this.showPhoneAuthScreen();
            }

            this.setupBackButton();
            console.log('Initialization completed');

        } catch (error) {
            console.error('Initialization error:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    showError(message) {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('loadingScreen').classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorScreen = document.createElement('div');
        errorScreen.className = 'screen error-screen';
        errorScreen.innerHTML = `
            <div class="error-message">
                <p>‚ö†Ô∏è ${message}</p>
                <button onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
        document.getElementById('app').appendChild(errorScreen);
    }

    showPhoneAuthScreen() {
        console.log('Showing phone auth screen');
        this.hideAllScreens();
        document.getElementById('authScreen').classList.remove('hidden');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Telegram
        const authButton = document.createElement('button');
        authButton.className = 'button auth-button';
        authButton.innerHTML = 'üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        authButton.onclick = () => {
            this.tg.requestContact()
                .then(contact => {
                    if (contact && contact.phone_number) {
                        this.checkAuth(contact.phone_number);
                    }
                })
                .catch(error => {
                    console.error('Error requesting contact:', error);
                    this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                });
        };
        
        document.getElementById('authScreen').appendChild(authButton);
    }

    setupBackButton() {
        this.tg.BackButton.onClick(() => {
            if (this.currentScreen === 'domofon-control') {
                this.showDomofonsScreen();
            } else if (this.currentScreen === 'domofons') {
                this.showMainScreen();
            }
        });
    }

    async checkAuth() {
        const user = this.tg.initDataUnsafe.user;
        try {
            const response = await fetch(`${this.API_URL}/check-tenant`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({ phone: user.phone_number })
            });
            
            if (response.ok) {
                const data = await response.json();
                this.tenant_id = data.tenant_id;
                this.showMainScreen();
            } else {
                this.showPhoneAuthScreen();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.showPhoneAuthScreen();
        }
    }

    async showMainScreen() {
        this.currentScreen = 'main';
        this.tg.BackButton.hide();
        this.hideAllScreens();
        document.getElementById('mainScreen').classList.remove('hidden');
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        const mainMenu = document.createElement('div');
        mainMenu.className = 'main-menu';
        mainMenu.innerHTML = `
            <button class="menu-button" onclick="app.showApartmentsScreen()">
                üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã
            </button>
            <button class="menu-button" onclick="app.showDomofonsScreen()">
                üö™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–æ—Ñ–æ–Ω—ã
            </button>
        `;
        document.getElementById('mainScreen').appendChild(mainMenu);
    }

    async showDomofonsScreen() {
        this.currentScreen = 'domofons';
        this.tg.BackButton.show();
        this.hideAllScreens();
        const domofonsScreen = document.getElementById('domofonsScreen');
        domofonsScreen.classList.remove('hidden');

        const domofons = await this.getDomofons();
        const domofonsList = document.createElement('div');
        domofonsList.className = 'domofons-list';

        domofons.forEach(domofon => {
            const domofonCard = document.createElement('div');
            domofonCard.className = 'domofon-card';
            domofonCard.innerHTML = `
                <div class="domofon-info">
                    <span class="domofon-name">üì∑ –ö–∞–º–µ—Ä–∞ ${domofon.name}</span>
                </div>
                <div class="domofon-controls">
                    <button class="button" onclick="app.getSnapshot(${domofon.id})">
                        üì∑ –°–Ω–∏–º–æ–∫
                    </button>
                    ${!domofon.name.toLowerCase().includes('–∫–æ–Ω—Å—å–µ—Ä–∂') ? `
                        <button class="button success" onclick="app.openDoor(${domofon.id})">
                            üîì –û—Ç–∫—Ä—ã—Ç—å
                        </button>
                    ` : ''}
                </div>
            `;
            domofonsList.appendChild(domofonCard);
        });

        domofonsScreen.innerHTML = '';
        domofonsScreen.appendChild(domofonsList);
    }

    async showApartmentsScreen() {
        this.currentScreen = 'apartments';
        this.tg.BackButton.show();
        this.hideAllScreens();
        const apartmentsScreen = document.getElementById('apartmentsScreen');
        apartmentsScreen.classList.remove('hidden');

        const apartments = await this.getApartments();
        const apartmentsList = document.createElement('div');
        apartmentsList.className = 'apartments-list';

        apartments.forEach(apartment => {
            const apartmentCard = document.createElement('div');
            apartmentCard.className = 'apartment-card';
            const location = apartment.location || {};
            
            apartmentCard.innerHTML = `
                <h3>–ö–≤–∞—Ä—Ç–∏—Ä–∞ #${apartment.id}</h3>
                <p>üìç –ê–¥—Ä–µ—Å: ${location.readable_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p>üö™ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: ${location.apartments_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                ${apartment.tenants ? `
                    <div class="tenants-list">
                        <h4>üë• –ñ–∏–ª—å—Ü—ã:</h4>
                        ${apartment.tenants.map(tenant => `
                            <div class="tenant">
                                <p>${tenant.name} (${tenant.status?.role === 1 ? 'üëë –í–ª–∞–¥–µ–ª–µ—Ü' : 'üë§ –ñ–∏–ª–µ—Ü'})</p>
                                <p>üì± ${this.formatPhone(tenant.phone)}</p>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            `;
            apartmentsList.appendChild(apartmentCard);
        });

        apartmentsScreen.innerHTML = '';
        apartmentsScreen.appendChild(apartmentsList);
    }

    formatPhone(phone) {
        if (!phone || phone.length !== 11) return phone;
        return `+${phone[0]} (${phone.slice(1,4)}) ${phone.slice(4,7)}-${phone.slice(7,9)}-${phone.slice(9)}`;
    }

    hideAllScreens() {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.add('hidden');
        });
    }

    async getDomofons() {
        try {
            const response = await fetch(`${this.API_URL}/domo.apartment?tenant_id=${this.tenant_id}`, {
                headers: {
                    'x-api-key': this.API_TOKEN
                }
            });
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤:', error);
            return [];
        }
    }

    async openDoor(domofonId) {
        try {
            const response = await fetch(`${this.API_URL}/domo.domofon/${domofonId}/open`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({
                    door_id: 0,
                    tenant_id: this.tenant_id
                })
            });
            return response.ok;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏:', error);
            return false;
        }
    }

    async getSnapshot(domofonId) {
        try {
            const response = await fetch(`${this.API_URL}/domo.domofon/urlsOnType`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({
                    intercoms_id: [domofonId],
                    media_type: ["JPEG"],
                    tenant_id: this.tenant_id
                })
            });
            const data = await response.json();
            return data[0]?.jpeg;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
            return null;
        }
    }

    setThemeClass() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        document.documentElement.className = this.tg.colorScheme;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç
    sendDataToBot(data) {
        this.tg.sendData(JSON.stringify(data));
    }
}