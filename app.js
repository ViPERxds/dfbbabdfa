// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class TelegramWebApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.API_URL = 'https://domo-dev.profintel.ru/tg-bot';
        this.API_TOKEN = 'SecretToken';
        this.currentScreen = 'main';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—ÇÔøΩÔøΩ
        setTimeout(() => this.initApp(), 100);
    }

    async initApp() {
        try {
            console.log('Starting initialization...');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram.WebApp –¥–æ—Å—Ç—É–ø–µ–Ω
            if (!this.tg) {
                throw new Error('Telegram WebApp is not available');
            }

            this.tg.ready();
            this.setThemeClass();
            
            // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.showPhoneAuthScreen();
            this.setupBackButton();

        } catch (error) {
            console.error('Initialization error:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
    }

    showError(message) {
        // –°–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('loadingScreen').classList.add('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        const errorScreen = document.createElement('div');
        errorScreen.className = 'screen error-screen';
        errorScreen.innerHTML = `
            <div class="error-message">
                <p>‚ö†Ô∏è ${message}</p>
                <button onclick="location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
            </div>
        `;
        document.getElementById('app').appendChild(errorScreen);
    }

    showPhoneAuthScreen() {
        console.log('Showing phone auth screen');
        this.hideAllScreens();
        const authScreen = document.getElementById('authScreen');
        authScreen.classList.remove('hidden');
        
        // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        authScreen.innerHTML = `
            <div class="welcome-screen">
                <h2>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º!</h2>
                
                <div class="features-block">
                    <p>üîê –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã —Å–º–æ–∂–µ—Ç–µ:</p>
                    <ul>
                        <li>–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–Ω–∏–º–∫–∏ —Å –∫–∞–º–µ—Ä</li>
                        <li>–û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–≤–µ—Ä–∏</li>
                        <li>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö</li>
                    </ul>
                </div>
                
                <div class="auth-form">
                    <p>üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</p>
                    <div class="input-group">
                        <input type="tel" 
                               id="phoneInput" 
                               placeholder="+7 (___) ___-__-__"
                               class="phone-input">
                    </div>
                    <button class="auth-button" onclick="app.handlePhoneAuth()">
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                    <div id="authError" class="error-message hidden"></div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Å–∫—É –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneInput = document.getElementById('phoneInput');
        phoneInput.addEventListener('input', (e) => {
            let value = e.target.value.replace(/\D/g, '');
            if (value.length > 0) {
                if (value[0] !== '7') value = '7' + value;
                value = value.substring(0, 11);
                const formatted = this.formatPhoneInput(value);
                e.target.value = formatted;
            }
        });
    }

    formatPhoneInput(value) {
        if (!value) return '';
        const match = value.match(/^(\d{1})(\d{0,3})(\d{0,3})(\d{0,2})(\d{0,2})$/);
        if (!match) return value;
        
        let formatted = '+' + match[1];
        if (match[2]) formatted += ` (${match[2]}`;
        if (match[3]) formatted += `) ${match[3]}`;
        if (match[4]) formatted += `-${match[4]}`;
        if (match[5]) formatted += `-${match[5]}`;
        
        return formatted;
    }

    async handlePhoneAuth() {
        const phoneInput = document.getElementById('phoneInput');
        const errorDiv = document.getElementById('authError');
        const phone = phoneInput.value.replace(/\D/g, '');

        if (phone.length !== 11) {
            errorDiv.textContent = '‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
            errorDiv.classList.remove('hidden');
            return;
        }

        try {
            await this.checkAuth(phone);
        } catch (error) {
            errorDiv.textContent = '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
            errorDiv.classList.remove('hidden');
        }
    }

    setupBackButton() {
        this.tg.BackButton.onClick(() => {
            if (this.currentScreen === 'domofon-control') {
                this.showDomofonsScreen();
            } else if (this.currentScreen === 'domofons') {
                this.showMainScreen();
            }
        });
    }

    async checkAuth(phone) {
        try {
            console.log('Checking auth for phone:', phone);
            const response = await fetch(`${this.API_URL}/check-tenant`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({ phone: parseInt(phone) })
            });
            
            if (response.ok) {
                const data = await response.json();
                this.tenant_id = data.tenant_id;
                this.showMainScreen();
            } else {
                throw new Error('Auth failed');
            }
        } catch (error) {
            console.error('Auth error:', error);
            this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    async showMainScreen() {
        this.currentScreen = 'main';
        this.tg.BackButton.hide();
        this.hideAllScreens();
        const mainScreen = document.getElementById('mainScreen');
        mainScreen.classList.remove('hidden');
        
        mainScreen.innerHTML = `
            <div class="container">
                <div class="header">
                    <h1>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º</h1>
                </div>
                <div class="menu-grid">
                    <div class="menu-card" onclick="app.showApartmentsScreen()">
                        <div class="menu-icon">üè†</div>
                        <h3>–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã</h3>
                        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –∏ –∂–∏–ª—å—Ü–∞—Ö</p>
                    </div>
                    <div class="menu-card" onclick="app.showDomofonsScreen()">
                        <div class="menu-icon">üö™</div>
                        <h3>–î–æ–º–æ—Ñ–æ–Ω—ã</h3>
                        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏ –∏ –∫–∞–º–µ—Ä–∞–º–∏</p>
                    </div>
                </div>
            </div>
        `;
    }

    async showDomofonsScreen() {
        this.currentScreen = 'domofons';
        this.tg.BackButton.show();
        this.hideAllScreens();
        const domofonsScreen = document.getElementById('domofonsScreen');
        domofonsScreen.classList.remove('hidden');

        domofonsScreen.innerHTML = `
            <div class="container">
                <div class="header">
                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏</h2>
                </div>
                <div class="domofons-grid" id="domofonsList">
                    <div class="loader"></div>
                </div>
            </div>
        `;

        const domofons = await this.getDomofons();
        const domofonsList = document.getElementById('domofonsList');
        domofonsList.innerHTML = '';

        domofons.forEach(domofon => {
            const card = document.createElement('div');
            card.className = 'domofon-card';
            card.innerHTML = `
                <div class="card-header">
                    <h3>üì∑ ${domofon.name}</h3>
                </div>
                <div class="card-content">
                    <div class="preview-container" id="preview_${domofon.id}">
                        <div class="preview-placeholder">
                            –ù–∞–∂–º–∏—Ç–µ "–°–Ω–∏–º–æ–∫" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                        </div>
                    </div>
                    <div class="card-actions">
                        <button class="button" onclick="app.handleSnapshot(${domofon.id})">
                            üì∑ –°–Ω–∏–º–æ–∫
                        </button>
                        ${!domofon.name.toLowerCase().includes('–∫–æ–Ω—Å—å–µ—Ä–∂') ? `
                            <button class="button success" onclick="app.handleDoorOpen(${domofon.id})">
                                üîì –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å
                            </button>
                        ` : ''}
                    </div>
                </div>
            `;
            domofonsList.appendChild(card);
        });
    }

    async showApartmentsScreen() {
        this.currentScreen = 'apartments';
        this.tg.BackButton.show();
        this.hideAllScreens();
        const apartmentsScreen = document.getElementById('apartmentsScreen');
        apartmentsScreen.classList.remove('hidden');

        const apartments = await this.getApartments();
        const apartmentsList = document.createElement('div');
        apartmentsList.className = 'apartments-list';

        apartments.forEach(apartment => {
            const apartmentCard = document.createElement('div');
            apartmentCard.className = 'apartment-card';
            const location = apartment.location || {};
            
            apartmentCard.innerHTML = `
                <h3>–ö–≤–∞—Ä—Ç–∏—Ä–∞ #${apartment.id}</h3>
                <p>üìç –ê–¥—Ä–µ—Å: ${location.readable_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p>üö™ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: ${location.apartments_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                ${apartment.tenants ? `
                    <div class="tenants-list">
                        <h4>üë• –ñ–∏–ª—å—Ü—ã:</h4>
                        ${apartment.tenants.map(tenant => `
                            <div class="tenant">
                                <p>${tenant.name} (${tenant.status?.role === 1 ? 'üëë –í–ª–∞–¥–µ–ª–µ—Ü' : 'üë§ –ñ–∏–ª–µ—Ü'})</p>
                                <p>üì± ${this.formatPhone(tenant.phone)}</p>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            `;
            apartmentsList.appendChild(apartmentCard);
        });

        apartmentsScreen.innerHTML = '';
        apartmentsScreen.appendChild(apartmentsList);
    }

    formatPhone(phone) {
        if (!phone || phone.length !== 11) return phone;
        return `+${phone[0]} (${phone.slice(1,4)}) ${phone.slice(4,7)}-${phone.slice(7,9)}-${phone.slice(9)}`;
    }

    hideAllScreens() {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.add('hidden');
        });
    }

    async getDomofons() {
        try {
            const response = await fetch(`${this.API_URL}/domo.apartment?tenant_id=${this.tenant_id}`, {
                headers: {
                    'x-api-key': this.API_TOKEN
                }
            });
            return await response.json();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤:', error);
            return [];
        }
    }

    async openDoor(domofonId) {
        try {
            const response = await fetch(`${this.API_URL}/domo.domofon/${domofonId}/open`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({
                    door_id: 0,
                    tenant_id: this.tenant_id
                })
            });
            return response.ok;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏:', error);
            return false;
        }
    }

    async getSnapshot(domofonId) {
        try {
            const response = await fetch(`${this.API_URL}/domo.domofon/urlsOnType`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'x-api-key': this.API_TOKEN
                },
                body: JSON.stringify({
                    intercoms_id: [domofonId],
                    media_type: ["JPEG"],
                    tenant_id: this.tenant_id
                })
            });
            const data = await response.json();
            return data[0]?.jpeg;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
            return null;
        }
    }

    setThemeClass() {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        document.documentElement.className = this.tg.colorScheme;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç
    sendDataToBot(data) {
        this.tg.sendData(JSON.stringify(data));
    }

    async handleSnapshot(domofonId) {
        const previewContainer = document.getElementById(`preview_${domofonId}`);
        previewContainer.innerHTML = '<div class="loader"></div>';
        
        try {
            const snapshotUrl = await this.getSnapshot(domofonId);
            if (snapshotUrl) {
                previewContainer.innerHTML = `
                    <img src="${snapshotUrl}" alt="–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã" class="snapshot-image">
                    <div class="snapshot-timestamp">
                        ${new Date().toLocaleTimeString()}
                    </div>
                `;
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫');
            }
        } catch (error) {
            previewContainer.innerHTML = `
                <div class="error-message">
                    –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞
                </div>
            `;
        }
    }

    async handleDoorOpen(domofonId) {
        const card = document.querySelector(`#preview_${domofonId}`).closest('.domofon-card');
        const statusElement = document.createElement('div');
        statusElement.className = 'door-status';
        
        try {
            const success = await this.openDoor(domofonId);
            if (success) {
                statusElement.innerHTML = `
                    <div class="success-message">
                        ‚úÖ –î–≤–µ—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞
                        <div class="status-details">
                            üïê ${new Date().toLocaleTimeString()}
                        </div>
                    </div>
                `;
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å');
            }
        } catch (error) {
            statusElement.innerHTML = `
                <div class="error-message">
                    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–≤–µ—Ä–∏
                </div>
            `;
        }
        
        card.appendChild(statusElement);
        setTimeout(() => statusElement.remove(), 3000);
    }
}