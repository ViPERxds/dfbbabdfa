let tg = window.Telegram.WebApp;
let tenant_id = null;
let activeCall = null;
let notificationSound = new Audio('notification.mp3');
let initData = window.Telegram.WebApp.initData || '';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    tg.expand();
    tg.ready();
    checkAuth();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è UI
function showAuthScreen() {
    document.getElementById('authScreen').classList.remove('hidden');
    document.getElementById('mainScreen').classList.add('hidden');
}

function showMainScreen() {
    document.getElementById('authScreen').classList.add('hidden');
    document.getElementById('mainScreen').classList.remove('hidden');
    connectWebSocket(); // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ –≤—Ö–æ–¥–µ
}

function showTab(tabName) {
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => tab.classList.add('hidden'));
    document.getElementById(`${tabName}List`).classList.remove('hidden');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–∞
    if (tabName === 'domofons') {
        loadDomofons();
    } else {
        loadApartments();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
async function checkAuth() {
    const userId = tg.initDataUnsafe?.user?.id;
    if (!userId) {
        showAuthScreen();
        return;
    }
    
    // –ò—â–µ–º tenant_id –ø–æ chat_id –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    for (let [tid, chatId] of Object.entries(CHAT_ID_MAPPING)) {
        if (chatId === userId.toString()) {
            tenant_id = parseInt(tid);
            showMainScreen();
            loadDomofons();
            return;
        }
    }
    showAuthScreen();
}

// –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const cache = {
    domofons: null,
    apartments: null,
    lastUpdate: {
        domofons: 0,
        apartments: 0
    }
};

const CACHE_LIFETIME = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∞–¥–µ—Ä–æ–º
function showLoader(id) {
    document.getElementById(id).classList.add('loading');
}

function hideLoader(id) {
    document.getElementById(id).classList.remove('loading');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é sendPhone
async function sendPhone() {
    const phone = document.getElementById('phoneInput').value.replace(/\D/g, '');
    
    // –ò—â–µ–º tenant_id –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
    for (let [tid, phoneNum] of Object.entries(PHONE_MAPPING)) {
        if (phoneNum.toString() === phone) {
            tenant_id = parseInt(tid);
            showMainScreen();
            loadDomofons();
            return;
        }
    }
    
    tg.showAlert('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadDomofons —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async function loadDomofons() {
    const now = Date.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cache.domofons && (now - cache.lastUpdate.domofons < CACHE_LIFETIME)) {
        renderDomofons(cache.domofons);
        return;
    }

    try {
        showLoader('domofonsLoader');
        const response = await fetch(`${API_URL}/domo.domofon`, {
            headers: {
                'x-api-key': API_TOKEN,
                'Content-Type': 'application/json'
            },
            params: { tenant_id }
        });
        
        const domofons = await response.json();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        cache.domofons = domofons;
        cache.lastUpdate.domofons = now;
        
        renderDomofons(domofons);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤');
        document.getElementById('domofonsList').innerHTML = `
            <div class="error-message">
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
                <button onclick="loadDomofons()">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å</button>
            </div>
        `;
    } finally {
        hideLoader('domofonsLoader');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
function renderDomofons(domofons) {
    const container = document.getElementById('domofonsList');
    container.innerHTML = domofons.map(domofon => `
        <div class="domofon-card fade-in">
            <h3>${domofon.name}</h3>
            <div class="domofon-actions">
                <button onclick="getDomophoneSnapshot(${domofon.id}, this)">üì∑ –ö–∞–º–µ—Ä–∞</button>
                <button onclick="openDoor(${domofon.id}, this)">üîì –û—Ç–∫—Ä—ã—Ç—å</button>
            </div>
        </div>
    `).join('');
}

async function loadApartments() {
    try {
        const response = await fetch(`${API_URL}/domo.apartment`, {
            headers: {
                'x-api-key': API_TOKEN,
                'Content-Type': 'application/json'
            },
            params: { tenant_id }
        });
        
        const apartments = await response.json();
        const container = document.getElementById('apartmentsList');
        container.innerHTML = apartments.map(apt => `
            <div class="apartment-card">
                <h3>–ö–≤–∞—Ä—Ç–∏—Ä–∞ ${apt.location?.apartments_number || ''}</h3>
                <p>–ê–¥—Ä–µ—Å: ${apt.location?.readable_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p>–û–ø–ª–∞—á–µ–Ω–æ –¥–æ: ${apt.paid_before || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                ${apt.tenants ? `
                    <div class="tenants-list">
                        <h4>–ñ–∏–ª—å—Ü—ã:</h4>
                        ${apt.tenants.map(tenant => `
                            <div class="tenant">
                                <p>${tenant.name} (${tenant.status?.role === 1 ? 'üëë –í–ª–∞–¥–µ–ª–µ—Ü' : 'üë§ –ñ–∏–ª–µ—Ü'})</p>
                                <p>üì± ${formatPhone(tenant.phone)}</p>
                            </div>
                        `).join('')}
                    </div>
                ` : ''}
            </div>
        `).join('');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä');
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function getDomophoneSnapshot(domofonId, button) {
    try {
        button.disabled = true;
        const response = await api.domofon.getMediaUrls([domofonId]);
        
        if (response && response[0]?.jpeg) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–Ω–∏–º–∫–∞
            const modalHtml = `
                <div class="snapshot-modal fade-in">
                    <div class="snapshot-header">
                        <h3>üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã</h3>
                        <button onclick="closeSnapshotModal()">‚úï</button>
                    </div>
                    <div class="snapshot-content">
                        <img src="${response[0].jpeg}" alt="–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã">
                    </div>
                </div>
                <div class="modal-overlay" onclick="closeSnapshotModal()"></div>
            `;
            
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.body.appendChild(modalContainer);
        } else {
            tg.showAlert('‚ö†Ô∏è –°–Ω–∏–º–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞');
    } finally {
        button.disabled = false;
    }
}

function closeSnapshotModal() {
    const modal = document.querySelector('.snapshot-modal');
    const overlay = document.querySelector('.modal-overlay');
    if (modal && overlay) {
        modal.classList.add('fade-out');
        overlay.classList.add('fade-out');
        setTimeout(() => {
            modal.parentElement.remove();
        }, 300);
    }
}

async function openDoor(domofonId, button) {
    try {
        button.disabled = true;
        const response = await fetch(`${API_URL}/domo.domofon/${domofonId}/open`, {
            method: 'POST',
            headers: {
                'x-api-key': API_TOKEN,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ door_id: 0 }),
            params: { tenant_id }
        });
        
        if (response.ok) {
            tg.showAlert('–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞');
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏');
    } finally {
        button.disabled = false;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatPhone(phone) {
    if (!phone) return '';
    const cleaned = phone.toString().replace(/\D/g, '');
    return `+${cleaned.slice(0, 1)} (${cleaned.slice(1, 4)}) ${cleaned.slice(4, 7)}-${cleaned.slice(7, 9)}-${cleaned.slice(9)}`;
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤
function handleIncomingCall(callData) {
    activeCall = callData;
    
    // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ –∑–≤–æ–Ω–∫–æ–º
    const modalHtml = `
        <div class="call-modal fade-in">
            <div class="call-header">
                <h3>üîî –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤</h3>
                <p class="call-time">${new Date().toLocaleTimeString()}</p>
            </div>
            ${callData.snapshot_url ? `
                <div class="call-snapshot">
                    <img src="${callData.snapshot_url}" alt="–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã">
                </div>
            ` : '<p class="no-snapshot">–°–Ω–∏–º–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>'}
            <div class="call-actions">
                <button onclick="handleCall('accept', ${callData.domofon_id})" class="accept-btn">
                    üîì –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å
                </button>
                <button onclick="handleCall('reject')" class="reject-btn">
                    ‚õîÔ∏è –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                </button>
            </div>
        </div>
        <div class="modal-overlay"></div>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const modalContainer = document.createElement('div');
    modalContainer.innerHTML = modalHtml;
    document.body.appendChild(modalContainer);
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notificationSound.play();
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ –∑–≤–æ–Ω–∫–æ–º
async function handleCall(action, domofonId) {
    if (action === 'accept') {
        await openDoor(domofonId);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.querySelector('.call-modal');
    const overlay = document.querySelector('.modal-overlay');
    if (modal && overlay) {
        modal.classList.add('fade-out');
        overlay.classList.add('fade-out');
        setTimeout(() => {
            modal.parentElement.remove();
        }, 300);
    }
    
    activeCall = null;
    notificationSound.pause();
    notificationSound.currentTime = 0;
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let ws;

function connectWebSocket() {
    ws = new WebSocket(`wss://domo-dev.profintel.ru/tg-bot/ws/${tenant_id}`);
    
    ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        if (data.type === 'call') {
            handleIncomingCall(data);
        }
    };
    
    ws.onclose = () => {
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –æ–±—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setTimeout(connectWebSocket, 5000);
    };
}

// –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –≤—Å–µ–º–∏ endpoints
const api = {
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏
    domofon: {
        // GET /domo.domofon - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
        getList: async () => {
            return await apiRequest('GET', '/domo.domofon', { tenant_id });
        },

        // POST /domo.domofon/{intercom_id}/open - –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–∏
        openDoor: async (intercom_id) => {
            return await apiRequest('POST', `/domo.domofon/${intercom_id}/open`, 
                { tenant_id }, { door_id: 0 });
        },

        // POST /domo.domofon/urlsOnType - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–µ–¥–∏–∞
        getMediaUrls: async (intercoms_id, media_type = ["JPEG"]) => {
            return await apiRequest('POST', '/domo.domofon/urlsOnType',
                { tenant_id }, { intercoms_id, media_type });
        }
    },

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏
    apartment: {
        // GET /domo.apartment - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä
        getList: async () => {
            return await apiRequest('GET', '/domo.apartment', { tenant_id });
        },

        // GET /domo.apartment/{apartment_id} - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–≤–∞—Ä—Ç–∏—Ä–µ
        getInfo: async (apartment_id) => {
            return await apiRequest('GET', `/domo.apartment/${apartment_id}`, { tenant_id });
        },

        // GET /domo.apartment/{apartment_id}/domofon - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã
        getDomofons: async (apartment_id) => {
            return await apiRequest('GET', `/domo.apartment/${apartment_id}/domofon`, { tenant_id });
        }
    },

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∏–ª—å—Ü–∞–º–∏
    tenant: {
        // POST /check-tenant - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–ª—å—Ü–∞
        check: async (phone) => {
            return await apiRequest('POST', '/check-tenant', null, { phone });
        }
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(method, endpoint, params = null, body = null) {
    try {
        const url = new URL(API_URL + endpoint);
        if (params) {
            Object.keys(params).forEach(key => 
                url.searchParams.append(key, params[key]));
        }

        const options = {
            method,
            headers: {
                'x-api-key': API_TOKEN,
                'Content-Type': 'application/json',
                'accept': 'application/json'
            }
        };

        if (body) {
            options.body = JSON.stringify(body);
        }

        const response = await fetch(url, options);

        if (!response.ok) {
            const errorData = await response.json().catch(() => null);
            throw new Error(errorData?.message || `HTTP error! status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error(`API Error (${endpoint}):`, error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä —Å –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏
async function loadApartmentsWithDomofons() {
    try {
        showLoader('apartmentsLoader');
        const apartments = await api.apartment.getList();
        
        const apartmentsWithDomofons = await Promise.all(
            apartments.map(async (apt) => {
                const domofons = await api.apartment.getDomofons(apt.id);
                return { ...apt, domofons };
            })
        );

        renderApartments(apartmentsWithDomofons);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
        hideLoader('apartmentsLoader');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫–≤–∞—Ä—Ç–∏—Ä —Å –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏
function renderApartments(apartments) {
    const container = document.getElementById('apartmentsList');
    container.innerHTML = apartments.map(apt => `
        <div class="apartment-card fade-in">
            <h3>–ö–≤–∞—Ä—Ç–∏—Ä–∞ ${apt.location?.apartments_number || ''}</h3>
            <p>–ê–¥—Ä–µ—Å: ${apt.location?.readable_address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            
            ${apt.domofons?.length ? `
                <div class="apartment-domofons">
                    <h4>–î–æ–º–æ—Ñ–æ–Ω—ã:</h4>
                    ${apt.domofons.map(domofon => `
                        <div class="domofon-item">
                            <span>${domofon.name}</span>
                            <div class="domofon-actions">
                                <button onclick="getDomophoneSnapshot(${domofon.id}, this)">
                                    üì∑ –ö–∞–º–µ—Ä–∞
                                </button>
                                <button onclick="openDoor(${domofon.id}, this)">
                                    üîì –û—Ç–∫—Ä—ã—Ç—å
                                </button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            ` : '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤</p>'}
        </div>
    `).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏
async function openDoor(domofonId, button) {
    try {
        button.disabled = true;
        await api.domofon.openDoor(domofonId);
        tg.showAlert('–î–≤–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏:', error);
        tg.showAlert('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–∏');
    } finally {
        button.disabled = false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞ —Å –∫–∞–º–µ—Ä—ã
async function getDomophoneSnapshot(domofonId, button) {
    try {
        button.disabled = true;
        const response = await api.domofon.getMediaUrls([domofonId]);
        
        if (response && response[0]?.jpeg) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–Ω–∏–º–∫–∞
            const modalHtml = `
                <div class="snapshot-modal fade-in">
                    <div class="snapshot-header">
                        <h3>üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã</h3>
                        <button onclick="closeSnapshotModal()">‚úï</button>
                    </div>
                    <div class="snapshot-content">
                        <img src="${response[0].jpeg}" alt="–°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã">
                    </div>
                </div>
                <div class="modal-overlay" onclick="closeSnapshotModal()"></div>
            `;
            
            const modalContainer = document.createElement('div');
            modalContainer.innerHTML = modalHtml;
            document.body.appendChild(modalContainer);
        } else {
            tg.showAlert('‚ö†Ô∏è –°–Ω–∏–º–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞:', error);
        tg.showAlert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞');
    } finally {
        button.disabled = false;
    }
}

function closeSnapshotModal() {
    const modal = document.querySelector('.snapshot-modal');
    const overlay = document.querySelector('.modal-overlay');
    if (modal && overlay) {
        modal.classList.add('fade-out');
        overlay.classList.add('fade-out');
        setTimeout(() => {
            modal.parentElement.remove();
        }, 300);
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function checkConnection() {
    try {
        await fetch(API_URL + '/health');
        return true;
    } catch {
        return false;
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω —Å–æ—Å—Ç–æ—è–Ω–∏—è
window.addEventListener('online', async () => {
    if (await checkConnection()) {
        tg.showAlert('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        if (tenant_id) {
            loadDomofons();
        }
    }
});

window.addEventListener('offline', () => {
    tg.showAlert('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
});