class TelegramWebApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.API_URL = 'https://domo-dev.profintel.ru/tg-bot';
        this.API_TOKEN = settings.API_TOKEN;
        this.initApp();
    }

    async initApp() {
        try {
            this.tg.ready();
            this.tg.expand();
            this.showAuthScreen();
        } catch (error) {
            console.error('Init error:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
        }
    }

    showAuthScreen() {
        const mainScreen = document.getElementById('mainScreen');
        mainScreen.innerHTML = `
            <div class="welcome-container fade-in">
                <div class="welcome-header">
                    <h1>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1>
                    <p class="welcome-subtitle">–≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º</p>
                </div>
                
                <div class="features-block slide-up">
                    <h2>üîê –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</h2>
                    <ul class="features-list">
                        <li>üì∏ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–Ω–∏–º–∫–∏ —Å –∫–∞–º–µ—Ä</li>
                        <li>üö™ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–≤–µ—Ä–∏</li>
                        <li>üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö</li>
                    </ul>
                </div>

                <div class="auth-form slide-up">
                    <div class="input-group">
                        <label>üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</label>
                        <input type="tel" 
                            id="phoneInput" 
                            class="phone-input" 
                            value="+"
                            placeholder="+7 (___) ___-__-__"
                        >
                        <div class="input-line"></div>
                    </div>
                    <button class="auth-button pulse" onclick="app.handleAuth()">
                        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                        <span class="button-arrow">‚Üí</span>
                    </button>
                </div>
            </div>
        `;

        const phoneInput = document.getElementById('phoneInput');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phoneInput.addEventListener('input', (e) => {
            let value = e.target.value;
            
            // –í—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–µ
            if (!value.startsWith('+')) {
                value = '+' + value;
            }
            
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ +
            let digits = value.substring(1).replace(/\D/g, '');
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 11 —Ü–∏—Ñ—Ä
            if (digits.length > 11) {
                digits = digits.substring(0, 11);
            }
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä
            e.target.value = this.formatPhoneInput(digits);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–∫—É—Å–∞
        phoneInput.addEventListener('focus', () => {
            phoneInput.parentElement.classList.add('focused');
            // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º +
            if (!phoneInput.value) {
                phoneInput.value = '+';
            }
        });

        phoneInput.addEventListener('blur', () => {
            if (phoneInput.value === '+') {
                phoneInput.value = '';
            }
            phoneInput.parentElement.classList.remove('focused');
        });
    }

    async handleAuth() {
        const phoneInput = document.getElementById('phoneInput');
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞
        const digits = phoneInput.value.replace(/\D/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
        if (digits.length !== 11) {
            this.showError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 (XXX) XXX-XX-XX');
            return;
        }

        try {
            await this.checkAuth(digits);
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        }
    }

    async checkAuth(phone) {
        try {
            const data = await this.apiRequest('/check-tenant', 'POST', { 
                phone: parseInt(phone, 10)
            });
            
            if (data && typeof data.tenant_id === 'number') {
                this.tenant_id = data.tenant_id;
                this.showMainMenu();
            } else {
                throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
            }
        } catch (error) {
            console.error('Auth error:', error);
            throw error;
        }
    }

    formatPhoneInput(digits) {
        if (!digits) return '+';
        
        let formatted = '+';
        if (digits.length > 0) formatted += digits.substring(0, 1);
        if (digits.length > 1) formatted += ' (' + digits.substring(1, 4);
        if (digits.length > 4) formatted += ') ' + digits.substring(4, 7);
        if (digits.length > 7) formatted += '-' + digits.substring(7, 9);
        if (digits.length > 9) formatted += '-' + digits.substring(9, 11);
        
        return formatted;
    }

    showMainMenu() {
        const mainScreen = document.getElementById('mainScreen');
        mainScreen.innerHTML = `
            <div class="menu-container fade-in">
                <h2 class="menu-title">üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</h2>
                <div class="menu-grid">
                    <div class="menu-card slide-up" onclick="app.showApartments()">
                        <div class="card-icon">üè¢</div>
                        <h3>–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã</h3>
                        <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö –∏ –∂–∏–ª—å—Ü–∞—Ö</p>
                    </div>
                    <div class="menu-card slide-up" onclick="app.showDomofons()">
                        <div class="card-icon">üö™</div>
                        <h3>–î–æ–º–æ—Ñ–æ–Ω—ã</h3>
                        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏ –∏ –∫–∞–º–µ—Ä–∞–º–∏</p>
                    </div>
                </div>
            </div>
        `;
    }

    async showDomofons() {
        const mainScreen = document.getElementById('mainScreen');
        mainScreen.innerHTML = `
            <div class="domofons-container fade-in">
                <h2 class="section-title">üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–æ—Ñ–æ–Ω—ã</h2>
                <div class="loader"></div>
            </div>
        `;

        try {
            const domofons = await this.getDomofons();
            const container = mainScreen.querySelector('.domofons-container');
            let html = '<div class="domofons-grid">';
            
            domofons.forEach((domofon, index) => {
                html += `
                    <div class="domofon-card slide-up" style="animation-delay: ${index * 0.1}s">
                        <div class="card-header">
                            <span class="card-title">üì∑ ${domofon.name}</span>
                        </div>
                        <div class="card-preview" id="preview_${domofon.id}">
                            <div class="preview-placeholder">
                                –ù–∞–∂–º–∏—Ç–µ "–°–Ω–∏–º–æ–∫" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                            </div>
                        </div>
                        <div class="card-actions">
                            <button class="action-button" onclick="app.getSnapshot(${domofon.id})">
                                üì∏ –°–Ω–∏–º–æ–∫
                            </button>
                            ${!domofon.name.toLowerCase().includes('–∫–æ–Ω—Å—å–µ—Ä–∂') ? `
                                <button class="action-button success" onclick="app.openDoor(${domofon.id})">
                                    üîì –û—Ç–∫—Ä—ã—Ç—å
                                </button>
                            ` : ''}
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            container.innerHTML = html;
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤');
        }
    }

    async showApartments() {
        const mainScreen = document.getElementById('mainScreen');
        mainScreen.innerHTML = '<div class="loader"></div>';

        try {
            const apartments = await this.getApartments();
            let html = '<div class="apartments-list">';
            
            apartments.forEach(apartment => {
                const location = apartment.location || {};
                html += `
                    <div class="apartment-item">
                        <div class="apartment-header">
                            –ö–≤–∞—Ä—Ç–∏—Ä–∞ ${location.apartments_number || ''}
                        </div>
                        <div class="apartment-address">
                            ${location.readable_address || ''}
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            mainScreen.innerHTML = html;
        } catch (error) {
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä');
        }
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'error';
        errorDiv.textContent = message;
        document.getElementById('mainScreen').appendChild(errorDiv);
        setTimeout(() => errorDiv.remove(), 3000);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ apiRequest
    async apiRequest(endpoint, method = 'GET', body = null) {
        const config = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json',
                'x-api-key': this.API_TOKEN
            }
        };

        if (body) {
            config.body = JSON.stringify(body);
        }

        try {
            console.log('Sending request to:', `${this.API_URL}${endpoint}`);
            console.log('Request config:', config);
            
            const response = await fetch(`${this.API_URL}${endpoint}`, config);
            
            console.log('Response status:', response.status);
            
            if (response.status === 403) {
                console.error('Access forbidden. Check API token');
                throw new Error('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω.');
            }
            
            if (response.status === 422) {
                const errorData = await response.json();
                console.error('Validation Error:', errorData);
                throw new Error(errorData.detail[0]?.msg || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏');
            }
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('Response data:', data);
            return data;
        } catch (error) {
            console.error('API request error:', error);
            throw error;
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ getDomofons
    async getDomofons() {
        return await this.apiRequest(`/domo.apartment?tenant_id=${this.tenant_id}`);
    }

    async getSnapshot(domofonId) {
        return await this.apiRequest('/domo.domofon/urlsOnType', 'POST', {
            intercoms_id: [domofonId],
            media_type: ["JPEG"],
            tenant_id: this.tenant_id
        });
    }

    async openDoor(domofonId) {
        return await this.apiRequest(`/domo.domofon/${domofonId}/open`, 'POST', {
            door_id: 0,
            tenant_id: this.tenant_id
        });
    }

    async getApartments() {
        return await this.apiRequest(`/domo.apartment?tenant_id=${this.tenant_id}`);
    }
}