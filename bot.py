from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler
from telegram.ext import ContextTypes, filters
import httpx
import logging
import json
import os
from dotenv import load_dotenv
from app.core.config import settings
from fastapi import HTTPException
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = settings.API_URL
TELEGRAM_TOKEN = settings.TELEGRAM_TOKEN

# –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ TELEGRAM_TOKEN
if not TELEGRAM_TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN –≤ .env —Ñ–∞–π–ª–µ")

class DomophoneBot:
    def __init__(self):
        if not TELEGRAM_TOKEN:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
        self.app = Application.builder().token(TELEGRAM_TOKEN).build()
        self.setup_handlers()
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("domofons", self.show_domofons))
        self.app.add_handler(CommandHandler("apartments", self.show_apartments))
        self.app.add_handler(MessageHandler(filters.CONTACT, self.handle_contact))
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_menu_buttons
        ))
        self.app.add_handler(CallbackQueryHandler(self.handle_callback))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º. Chat ID: {user_id}")
        
        if 'tenant_id' not in context.user_data:
            keyboard = [[{"text": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "request_contact": True}]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–æ—Ñ–æ–Ω–æ–º!\n\n"
                "üîê –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–Ω–∏–º–∫–∏ —Å –∫–∞–º–µ—Ä\n"
                "‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–≤–µ—Ä–∏\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–≤–æ–Ω–∫–∞—Ö\n\n"
                "üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=reply_markup
            )
        else:
            await self.show_main_menu(update, context)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/domofons - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
/apartments - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä

*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤
‚Ä¢ üì∑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤ —Å –∫–∞–º–µ—Ä
‚Ä¢ üö™ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–≤–µ—Ä–µ–π
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–æ–≤–∞—Ö

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª—Ñ–æ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /domofons –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞
3. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–≤ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–≤–µ—Ä–µ–π
        """
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )

    async def handle_contact(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            phone = update.message.contact.phone_number
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç 7XXXXXXXXXX
            phone = phone.replace('+', '').replace('-', '').replace(' ', '')
            if phone.startswith('8'):
                phone = '7' + phone[1:]
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if not phone.isdigit() or len(phone) != 11:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
                return
            
            async with httpx.AsyncClient(timeout=10.0) as client:
                headers = {
                    "x-api-key": settings.API_TOKEN,
                    "Content-Type": "application/json"
                }
                
                url = f"{settings.API_URL}/check-tenant"
                payload = {"phone": int(phone)}  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int —Å–æ–≥–ª–∞—Å–Ω–æ API
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: URL={url}, payload={payload}")
                
                response = await client.post(
                    url,
                    headers=headers,
                    json=payload
                )
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
                
                if response.status_code == 200:
                    data = response.json()
                    tenant_id = data.get('tenant_id')
                    if tenant_id is not None:
                        context.user_data['tenant_id'] = tenant_id
                        await self.show_main_menu(update, context)
                    else:
                        await update.message.reply_text(
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                        )
                elif response.status_code == 422:
                    error_data = response.json()
                    error_msg = error_data.get('detail', [{'msg': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}])[0].get('msg')
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_msg}")
                else:
                    raise HTTPException(status_code=response.status_code, detail=response.text)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def show_apartments(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä"""
        if 'tenant_id' not in context.user_data:
            await update.message.reply_text(
                "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            return
        
        try:
            headers = {
                "x-api-key": settings.API_TOKEN,
                "Content-Type": "application/json",
                "accept": "application/json"
            }
            
            tenant_id = context.user_data['tenant_id']
            apartments_url = f"{settings.API_URL}/domo.apartment"
            
            async with httpx.AsyncClient() as client:
                logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–≤–∞—Ä—Ç–∏—Ä –¥–ª—è tenant_id={tenant_id}")
                apartments_response = await client.get(
                    apartments_url,
                    headers=headers,
                    params={"tenant_id": tenant_id}
                )
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {apartments_response.status_code}")
                logger.info(f"–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {apartments_response.text}")
                
                if apartments_response.status_code == 200:
                    apartments = apartments_response.json()
                    if not apartments:
                        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
                        return
                        
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–≤–∞—Ä—Ç–∏—Ä
                    message_text = "üèò *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö*\n\n"
                    for idx, apartment in enumerate(apartments, 1):
                        location = apartment.get('location', {})
                        address = location.get('readable_address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                        apartment_number = location.get('apartments_number', '')
                        paid_before = apartment.get('paid_before', '')
                        
                        message_text += f"*–ö–≤–∞—Ä—Ç–∏—Ä–∞ #{idx}*\n"
                        message_text += f"üìç –ê–¥—Ä–µ—Å: `{address}`\n"
                        if apartment_number:
                            message_text += f"üö™ –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: `{apartment_number}`\n"
                        if paid_before:
                            message_text += f"üí≥ –û–ø–ª–∞—á–µ–Ω–æ –¥–æ: `{paid_before}`\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–ª—å—Ü–∞—Ö
                        tenants = apartment.get('tenants', [])
                        if tenants:
                            message_text += "\nüë• *–ñ–∏–ª—å—Ü—ã:*\n"
                            
                            for tenant in tenants:
                                name = tenant.get('name', '').strip()
                                phone = tenant.get('phone', '')
                                status = tenant.get('status', {})
                                role = status.get('role', 0)
                                
                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                                if phone and len(phone) == 11:
                                    formatted_phone = f"+{phone[0]} ({phone[1:4]}) {phone[4:7]}-{phone[7:9]}-{phone[9:]}"
                                else:
                                    formatted_phone = phone
                                    
                                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å –∂–∏–ª—å—Ü–∞
                                role_text = "üëë –í–ª–∞–¥–µ–ª–µ—Ü" if role == 1 else "üë§ –ñ–∏–ª–µ—Ü"
                                
                                message_text += f"‚Ä¢ {name} ({role_text})\n"
                                message_text += f"  üì± `{formatted_phone}`\n"
                        
                        message_text += "\n" + "‚îÄ" * 30 + "\n\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
                    message_text += (
                        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
                        "üì± /domofons - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–æ—Ñ–æ–Ω–∞–º–∏\n"
                        "‚ÑπÔ∏è /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–∞—Ä—Ç–∏—Ä–∞—Ö
                    await update.message.reply_text(
                        message_text,
                        parse_mode='Markdown',
                        disable_web_page_preview=True
                    )
                        
                elif apartments_response.status_code == 422:
                    error_data = apartments_response.json()
                    error_msg = error_data.get('detail', [{'msg': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}])[0].get('msg')
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error_msg}")
                else:
                    raise HTTPException(
                        status_code=apartments_response.status_code,
                        detail=apartments_response.text
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def show_domofons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤"""
        if 'tenant_id' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            return
        
        try:
            headers = {
                "x-api-key": settings.API_TOKEN,
                "Content-Type": "application/json"
            }
            
            tenant_id = context.user_data['tenant_id']
            apartments_url = f"{settings.API_URL}/domo.apartment"
            
            async with httpx.AsyncClient() as client:
                apartments_response = await client.get(
                    apartments_url,
                    headers=headers,
                    params={"tenant_id": tenant_id}
                )
                
                if apartments_response.status_code != 200:
                    raise HTTPException(
                        status_code=apartments_response.status_code,
                        detail=apartments_response.text
                    )
                
                apartments = apartments_response.json()
                if not apartments:
                    await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä")
                    return
                    
                keyboard = []
                
                for apartment in apartments:
                    apartment_id = apartment.get('id')
                    if apartment_id:
                        domofons_url = f"{settings.API_URL}/domo.apartment/{apartment_id}/domofon"
                        domofons_response = await client.get(
                            domofons_url,
                            headers=headers,
                            params={"tenant_id": tenant_id}
                        )
                        
                        if domofons_response.status_code == 200:
                            domofons = domofons_response.json()
                            for domofon in domofons:
                                domofon_id = domofon.get('id')
                                name = domofon.get('name', '')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–æ–º–æ—Ñ–æ–Ω –∫–æ–Ω—Å—å–µ—Ä–∂–µ–º
                                if "–∫–æ–Ω—Å—å–µ—Ä–∂" in name.lower():
                                    keyboard.append([
                                        InlineKeyboardButton(
                                            f"üì∑ –ö–∞–º–µ—Ä–∞ {name}",
                                            callback_data=f"snapshot_{domofon_id}"
                                        )
                                    ])
                                else:
                                    keyboard.append([
                                        InlineKeyboardButton(
                                            f"üì∑ –ö–∞–º–µ—Ä–∞ {name}",
                                            callback_data=f"snapshot_{domofon_id}"
                                        ),
                                        InlineKeyboardButton(
                                            f"üîì –û—Ç–∫—Ä—ã—Ç—å",
                                            callback_data=f"open_{domofon_id}"
                                        )
                                    ])
                
                if keyboard:
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await update.message.reply_text(
                        "üè† –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–æ—Ñ–æ–Ω—ã:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –¥–ª—è –≤–∞—à–∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä"
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–º–æ—Ñ–æ–Ω–æ–≤: {str(e)}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            query = update.callback_query
            data_parts = query.data.split('_')
            action = data_parts[0]
            domofon_id = int(data_parts[1])
            
            tenant_id = context.user_data.get('tenant_id')
            if not tenant_id:
                await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                await query.answer()
                return

            if action == "snapshot":
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–Ω–∏–º–∫–∞  –∫–∞–º–µ—Ä—ã
                url = f"{settings.API_URL}/domo.domofon/urlsOnType"
                
                headers = {
                    "X-API-KEY": settings.API_TOKEN,
                    "Content-Type": "application/json",
                    "accept": "application/json"
                }
                
                payload = {
                    "intercoms_id": [domofon_id],
                    "media_type": ["JPEG"]
                }
                params = {"tenant_id": tenant_id}
                
                async with httpx.AsyncClient() as client:
                    try:
                        response = await client.post(
                            url,
                            headers=headers,
                            json=payload,
                            params=params
                        )
                        
                        logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} - {response.text}")
                        
                        if response.status_code == 200:
                            data = response.json()
                            if data and len(data) > 0:
                                jpeg_url = data[0].get('jpeg')
                                if jpeg_url:
                                    await query.message.reply_photo(
                                        photo=jpeg_url,
                                        caption="üì∑ –°–Ω–∏–º–æ–∫ —Å –∫–∞–º–µ—Ä—ã"
                                    )
                                else:
                                    await query.message.reply_text("‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–Ω–∏–º–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            else:
                                await query.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–∞–º–µ—Ä—ã")
                        else:
                            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–Ω–∏–º–∫–∞: {response.text}")
                            
                    except httpx.RequestError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
                    
            elif action == "open":
                url = f"{settings.API_URL}/domo.domofon/{domofon_id}/open"
                
                headers = {
                    "X-API-KEY": settings.API_TOKEN,
                    "Content-Type": "application/json",
                    "accept": "application/json"
                }
                
                payload = {"door_id": 0}
                params = {"tenant_id": tenant_id}
                
                async with httpx.AsyncClient() as client:
                    try:
                        response = await client.post(
                            url,
                            headers=headers,
                            json=payload,
                            params=params
                        )
                        
                        logger.info(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code} - {response.text}")
                        
                        if response.status_code == 200:
                            success_message = (
                                "‚úÖ *–î–≤–µ—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞*\n\n"
                                "üïê –í—Ä–µ–º—è: {}\n"
                                "üö™ –î–æ–º–æ—Ñ–æ–Ω: #{}\n"
                                "üìç –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ\n\n"
                                "_–î–≤–µ—Ä—å –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥_"
                            ).format(
                                datetime.now().strftime("%H:%M:%S"),
                                domofon_id
                            )
                            await query.message.reply_text(
                                success_message,
                                parse_mode='Markdown'
                            )
                        elif response.status_code == 422:
                            error_data = response.json()
                            error_msg = error_data.get('detail', ['–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏'])[0].get('msg', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
                        else:
                            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                            
                    except httpx.RequestError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
        
            await query.answer()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {str(e)}", exc_info=True)
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            await query.answer()

    async def check_api(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
        try:
            async with httpx.AsyncClient() as client:
                response = await client.get(f"{API_URL}/")
                response.raise_for_status()
        except Exception as e:
            logger.error(f"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
            raise

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        keyboard = [
            ["üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã"],
            ["üö™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–æ—Ñ–æ–Ω—ã"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    async def handle_menu_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        text = update.message.text
        
        if text == "üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã":
            await self.show_apartments(update, context)
        elif text == "üö™ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–æ—Ñ–æ–Ω—ã":
            await self.show_domofons(update, context)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.app.run_polling()

if __name__ == '__main__':
    bot = DomophoneBot()
    bot.run() 